// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl= env("DIRECT_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  password String
  phone String @unique
  role Role @default(USER) 
  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt

  // verification
  isverified Boolean @default(false)
  verification VerificationToken[]

    //profile picture 
  profilePictureId String? @unique
  profilePicture ProfilePicture?

  // others
  refreshToken RefreshToken[]
  loan Loan[]
  review Review[]
}

model ProfilePicture {
  id String @id @default(uuid())
  userId String @unique
  filename String
  mimetype  String
  size      Int
  file      Bytes    
createdAt DateTime @default(now()) 
  uploadedAt DateTime @default(now())
 user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken{
   id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}


model Book {
    id            String   @id @default(uuid())
  title         String
  author        String
  publisher     String
  description   String?
  publishedYear Int
  coverImage    String?
  fileUrl       String?
  stock         Int@default(1)
  rating Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  loan Loan[]
 review Review[]
}


model Loan {
  id String @id @default(uuid())
  bookId      String 
  userId      String
  borrowedAt  DateTime @default(now())
  dueDate     DateTime
  returnedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isOverdueNotified Boolean @default(false)

  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId, returnedAt])
}

model Review {
   id        String   @id @default(uuid())
   userId    String
  bookId    String
  rating    Int      
  comment   String?
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId]) 
}

// schenma for contact messages
model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}


